namespace asset 

# --

route put(AssetPutArg, AssetPutResult, AssetPutError)
    "Put an asset."

struct AssetPutArg
    name String(min_length=1, max_length=2048)
    data Bytes
    conflict_policy PutConflictPolicy = override

union PutConflictPolicy
    "Policy when the new asset has a :field:`AssetPutTextArg.name` that
    conflicts with an existing asset."

    reject
    override

struct AssetPutResult
    entry AssetEntry

struct AssetEntry
    entry_id String(min_length=1)
    seq_id Int64
    name String(min_length=1)
    op AssetEntryOp
    asset AssetInfo
    metadata AssetMetadataInfo?
    total_size UInt64
        "The total size of all revisions of a given asset and metadata. This is
        important because a user's quota is based on the sum of all revisions."

struct AssetInfo
    rev_id String(min_length=1)
    created_by AssetCreatedBy
    size UInt64
        "Number of bytes. Deleted assets have a size of 0."
    hash String?
        "SHA-256 hash of the content. Unset if it's a deletion."
    url String?
        "A url to the asset data that expires in 24 hours. Unset if it's a
        deletion."

union AssetCreatedBy
    # Only one variant. In anticipation of assets by system operations.
    user AssetCreatedByUser
        struct
            username String(min_length=1)

struct AssetMetadataInfo
    rev_id String(min_length=1)
    created_by AssetCreatedBy
    size UInt64
        "Number of bytes. Deleted assets have a size of 0."
    hash String?
        "SHA-256 hash of the content. Unset if it's a deletion."
    url String?
        "A url to the asset data that expires in 24 hours. Unset if it's a
        deletion."
    title String?
        "If the metadata specified a `title` key with string value, this is a
        reproduction of it truncated to 64-chars."
    content_type String?
        "If the metadata specified a `content_type` key with value having fewer
        than 64-chars, this is a reproduction of it."

union AssetPutError
    bad_name
    no_permission
    name_conflict
        "Only returned if conflict policy is set to reject."
    over_quota

union AssetEntryOp
    add
    fork
        "Functionally the same as an add, but indicates it was forked from
        another asset chain due to conflict-policy."
    edit
    push
    delete
    metadata
        "Metadata for asset was added, modified, or removed."

# --

route put_text(AssetPutTextArg, AssetPutResult, AssetPutError)
    "Put an asset that's text. Unlike :route:`put`, input is a string (not bytes)
    and therefore does not need to be b64-serialized."

struct AssetPutTextArg
    name String(min_length=1, max_length=2048)
    data String(max_length=1000000)
    conflict_policy PutConflictPolicy = override

# --

route replace(AssetReplaceArg, AssetReplaceResult, AssetReplaceError)
    "Replace an asset."

struct AssetReplaceArg
    entry_id String(min_length=1)
    rev_id String(min_length=1)?
    data Bytes
    conflict_policy ReplaceConflictPolicy = reject

union ReplaceConflictPolicy
    "Policy when :field:`AssetReplaceArg.rev_id` is no longer the most recent
    for the asset."

    reject
    fork

struct AssetReplaceResult
    entry AssetEntry

union AssetReplaceError
    bad_entry_id
    no_permission
    bad_rev_id
    old_rev_id
        "Revision ID is no longer the most recent for the asset."
    over_quota

# --

route replace_text(AssetReplaceTextArg, AssetReplaceResult, AssetReplaceError)
    "Replace an asset with text. Unlike :route:`replace`, input is a string
    (not) bytes and therefore does not need to be b64-serialized."

struct AssetReplaceTextArg
    entry_id String(min_length=1)
    rev_id String(min_length=1)?
    data String(max_length=1000000)
    conflict_policy ReplaceConflictPolicy = reject

# --

route remove(AssetRemoveArg, AssetRemoveResult, AssetRemoveError)
    "Remove an asset."

struct AssetRemoveArg 
    name String(min_length=1)

struct AssetRemoveResult
    entry AssetEntry

union AssetRemoveError
    bad_name
    no_permission

# --

route get(AssetGetArg, AssetGetResult, AssetGetError)
    "Get an asset."

    attrs
        auth = "user_optional"

struct AssetGetArg
    name String(min_length=1)

struct AssetGetResult 
    entry AssetEntry

union AssetGetError
    bad_name
    no_permission

# --

route entry/list(AssetEntryListArg, AssetEntryListResult, AssetEntryListError)
    "List up to 100 entries. Not recommended for general usage but handy for
    auto-completion where completeness isn't crticial."

    attrs
        auth = "user_optional"

struct AssetEntryListArg
    prefix String?

struct AssetEntryListResult
    entries List(AssetEntry)

union AssetEntryListError
    no_permission

# --

route entry/iter (AssetEntryIterArg, AssetEntryIterResult, AssetEntryIterError)
    "More than just for iteration, it contains the necessary information for
    incrementally syncing."

    attrs
        auth = "user_optional"

struct AssetEntryIterArg
    prefix String?
    limit UInt32 = 100
        "The maximum number of entries to return at once. For internal reasons,
        fewer than `limit` may be returned."

struct AssetEntryIterResult
    entries List(AssetEntry)
    cursor String(min_length=1)
    has_more Boolean

union AssetEntryIterError
    empty
        "If a pool has never had an asset, this is returned since pools are
        created lazily."
    no_permission

# --

route entry/iter/next (AssetEntryIterNextArg, AssetEntryIterResult, AssetEntryIterNextError)
    attrs
        auth = "user_optional"

struct AssetEntryIterNextArg
    cursor String(min_length=1)
        "Use the cursor from :field:`AssetEntryIterResult.cursor`."
    limit UInt32 = 100
        "The maximum number of entries to return at once. For internal reasons,
        fewer than `limit` may be returned."

union AssetEntryIterNextError
    bad_cursor
    no_permission

# --

route entry/search(AssetEntrySearchArg, AssetEntrySearchResult, AssetEntrySearchError)
    "Search assets semantically."

    attrs
        auth = "user_optional"

struct AssetEntrySearchArg
    q String(min_length=1, max_length=1024)
    asset_pool_path String(min_length=1)?

struct AssetEntrySearchResult
    semantic_matches List(AssetEntry)

union AssetEntrySearchError
    bad_asset_pool_path
    no_permission

# --

route revision/iter(AssetRevisionIterArg, AssetRevisionIterResult, AssetRevisionIterError)
    "Iterate through revisions of an entry."

    attrs
        auth = "user_optional"

struct AssetRevisionIterArg
    entry_ref EntryRef
    limit UInt32 = 10
    direction RevisionIterDirection = older

union EntryRef
    name String(min_length=1)
    entry_id String(min_length=1)

union RevisionIterDirection
    older
    newer

struct AssetRevisionIterResult
    revisions List(AssetRevision)
    next AssetRevisionCursor?
    approx_remaining UInt32
        "Approximate number of revisions remaining including those in :field:`revisions`."

struct AssetRevisionCursor
    cursor String(min_length=1)
    is_fork Boolean
        "If set, the next call will jump to the parent revision-chain that
        forked into the one that's been iterating."

struct AssetRevision
    op AssetEntryOp
    asset AssetInfo
    metadata AssetMetadataInfo?

union AssetRevisionIterError
    bad_entry_ref
    no_permission

# --

route revision/iter/next(AssetRevisionIterNextArg, AssetRevisionIterResult, AssetRevisionIterNextError)
    "Iterate through the next set of revisions. Requires cursor from
    :route:`revision/iter`."

    attrs
        auth = "user_optional"

struct AssetRevisionIterNextArg
    cursor String(min_length=1)
    limit UInt32 = 10

union AssetRevisionIterNextError
    bad_cursor
    no_permission

# --

route push(AssetPushArg, AssetPushResult, AssetPushError)
    "Push into an asset."

struct AssetPushArg
    name String(min_length=1, max_length=2048)
    data Bytes

struct AssetPushResult
    entry AssetEntry

union AssetPushError
    bad_name
    no_permission
    over_quota

# --

route push_text(AssetPushTextArg, AssetPushResult, AssetPushError)
    "Push into an asset.

    Creates asset if it doesn't already exist."

struct AssetPushTextArg
    name String(min_length=1, max_length=2048)
    data String(max_length=1000000)

# --

route entry/acl/set(AssetEntryAclSetArg, AssetEntryAcl, AssetEntryAclSetError)
    "For now, this applies to the `everyone` implicit group and overrides the
    asset-pool permission."

union AceType
    "Access Control Entry (ACE)"
    allow
    deny
    default

struct AssetEntryAclSetArg
    entry_ref EntryRef
    read_data AceType?
    push_data AceType?
    read_revisions AceType?

union AssetEntryAclSetError
    bad_entry_ref
    no_permission

struct AssetEntryAcl
    read_data AceType
    push_data AceType
    read_revisions AceType

# --

route entry/acl/get(AssetEntryAclGetArg, AssetEntryAcl, AssetEntryAclGetError)
    "Gets the acl associated with an asset. The acl specifies overrides of the
    asset-pool permission."

struct AssetEntryAclGetArg
    entry_ref EntryRef

union AssetEntryAclGetError
    bad_entry_ref
    no_permission

# --

route metadata/put(AssetMetadataPutArg, AssetPutResult, AssetPutError)
    "Put metadata for an asset."

struct AssetMetadataPutArg
    name String(min_length=1, max_length=2048)
    data String(max_length=1000000)
        "Must be JSON"
    conflict_policy PutConflictPolicy = override

union AssetMetadataPutError
    bad_name
    no_permission
    conflict
        "Only returned if conflict policy is set to reject."
    over_quota
    bad_metadata
        "Metadata must be valid JSON."
